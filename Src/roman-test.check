#include "romanconverter.h"
#include "romancalculator.h"
#include <stdlib.h>

#test romanConverterTest

	char buffer[20];
	
	// check roman2dec_char
	ck_assert_int_eq(roman2dec_char('1'), 0);
	ck_assert_int_eq(roman2dec_char('m'), 1000);
	ck_assert_int_eq(roman2dec_char('X'), 10);
	ck_assert_int_eq(roman2dec_char('b'), 0);
	

	// check roman2dec_str
	ck_assert_int_eq(roman2dec_str(""), 0);
	ck_assert_int_eq(roman2dec_str("m"), 1000);
	ck_assert_int_eq(roman2dec_str("lXxXvIiI"), 88);
	ck_assert_int_eq(roman2dec_str("MMMACIX"), 0);
	ck_assert_int_eq(roman2dec_str("MMMMMXII"), 0);


	// check dec2roman 
	dec2roman(1, buffer);
	ck_assert_str_eq(buffer,"I");
	dec2roman(4999, buffer);
	ck_assert_str_eq(buffer,"MMMMCMXCIX");
	dec2roman(5000, buffer);
	ck_assert_str_eq(buffer,"\0");
	ck_assert_int_eq(dec2roman(4999, buffer), 1);
	ck_assert_int_eq(dec2roman(5000, buffer), 0);

	// check isItValidRomanNumeral
	ck_assert_int_eq(isItValidRomanNum("X"),1);
	ck_assert_int_eq(isItValidRomanNum("IIX"),0);
	ck_assert_int_eq(isItValidRomanNum("XBI"),0);
	ck_assert_int_eq(isItValidRomanNum("XXXX"),0);
	ck_assert_int_eq(isItValidRomanNum("DD"),0);


#test romanCalcTest
	char buffer[20];
	
	ck_assert_int_eq(add2romanNum("I", "I", buffer), 1);
